From de0cfd02e75d73dcf4e30e111eb76680489e3c21 Mon Sep 17 00:00:00 2001
From: NTeditor <nteditor4@gmail.com>
Date: Sat, 11 Oct 2025 13:11:13 +0300
Subject: [PATCH] patch

---
 components/volume.c | 272 ++++++++++++--------------------------------
 config.def.h        |  11 +-
 config.mk           |   2 +-
 slstatus.h          |   1 +
 4 files changed, 78 insertions(+), 208 deletions(-)

diff --git a/components/volume.c b/components/volume.c
index 6cec556..61e767a 100644
--- a/components/volume.c
+++ b/components/volume.c
@@ -1,219 +1,87 @@
 /* See LICENSE file for copyright and license details. */
 #include <fcntl.h>
+#include <pulse/pulseaudio.h>
 #include <stdio.h>
-#include <string.h>
-#include <sys/ioctl.h>
-#include <unistd.h>
 
-#include "../slstatus.h"
-#include "../util.h"
+static char vol_str[8] = { '\0' };
+static int vol_muted = 0;
 
-#if defined(__OpenBSD__) | defined(__FreeBSD__)
-	#include <poll.h>
-	#include <sndio.h>
-	#include <stdlib.h>
-	#include <sys/queue.h>
+static pa_mainloop *mainloop = NULL;
+static int data_ready = 0;
 
-	struct control {
-		LIST_ENTRY(control)	next;
-		unsigned int		addr;
-	#define CTRL_NONE	0
-	#define CTRL_LEVEL	1
-	#define CTRL_MUTE	2
-		unsigned int		type;
-		unsigned int		maxval;
-		unsigned int		val;
-	};
+void context_state_cb(pa_context *c, void *userdata);
+void sink_info_cb(pa_context *c, const pa_sink_info *i, int eol,
+                  void *userdata);
 
-	static LIST_HEAD(, control) controls = LIST_HEAD_INITIALIZER(controls);
-	static struct pollfd *pfds;
-	static struct sioctl_hdl *hdl;
-	static int initialized;
+void
+prepare_data(const char *card)
+{
+	data_ready = 0;
 
-	/*
-	 * Call-back to obtain the description of all audio controls.
-	 */
-	static void
-	ondesc(void *unused, struct sioctl_desc *desc, int val)
-	{
-		struct control *c, *ctmp;
-		unsigned int type = CTRL_NONE;
+	mainloop = pa_mainloop_new();
+	pa_mainloop_api *mainloop_api = pa_mainloop_get_api(mainloop);
+	pa_context *context =
+		pa_context_new(mainloop_api, "get_sink_information");
 
-		if (desc == NULL)
-			return;
+	pa_context_set_state_callback(context, context_state_cb, (void *)card);
+	pa_context_connect(context, NULL, PA_CONTEXT_NOFLAGS, NULL);
 
-		/* Delete existing audio control with the same address. */
-		LIST_FOREACH_SAFE(c, &controls, next, ctmp) {
-			if (desc->addr == c->addr) {
-				LIST_REMOVE(c, next);
-				free(c);
-				break;
-			}
-		}
-
-		/* Only match output.level and output.mute audio controls. */
-		if (desc->group[0] != 0 ||
-		    strcmp(desc->node0.name, "output") != 0)
-			return;
-		if (desc->type == SIOCTL_NUM &&
-		    strcmp(desc->func, "level") == 0)
-			type = CTRL_LEVEL;
-		else if (desc->type == SIOCTL_SW &&
-			 strcmp(desc->func, "mute") == 0)
-			type = CTRL_MUTE;
-		else
-			return;
-
-		c = malloc(sizeof(struct control));
-		if (c == NULL) {
-			warn("sndio: failed to allocate audio control\n");
-			return;
-		}
-
-		c->addr = desc->addr;
-		c->type = type;
-		c->maxval = desc->maxval;
-		c->val = val;
-		LIST_INSERT_HEAD(&controls, c, next);
-	}
-
-	/*
-	 * Call-back invoked whenever an audio control changes.
-	 */
-	static void
-	onval(void *unused, unsigned int addr, unsigned int val)
-	{
-		struct control *c;
-
-		LIST_FOREACH(c, &controls, next) {
-			if (c->addr == addr)
-				break;
-		}
-		c->val = val;
+	while (!data_ready) {
+		pa_mainloop_iterate(mainloop, 1, NULL);
 	}
 
-	static void
-	cleanup(void)
-	{
-		struct control *c;
-
-		if (hdl) {
-			sioctl_close(hdl);
-			hdl = NULL;
-		}
-
-		free(pfds);
-		pfds = NULL;
-
-		while (!LIST_EMPTY(&controls)) {
-			c = LIST_FIRST(&controls);
-			LIST_REMOVE(c, next);
-			free(c);
-		}
-	}
-
-	static int
-	init(void)
-	{
-		hdl = sioctl_open(SIO_DEVANY, SIOCTL_READ, 0);
-		if (hdl == NULL) {
-			warn("sndio: cannot open device");
-			goto failed;
-		}
-
-		if (!sioctl_ondesc(hdl, ondesc, NULL)) {
-			warn("sndio: cannot set control description call-back");
-			goto failed;
-		}
-
-		if (!sioctl_onval(hdl, onval, NULL)) {
-			warn("sndio: cannot set control values call-back");
-			goto failed;
-		}
-
-		pfds = calloc(sioctl_nfds(hdl), sizeof(struct pollfd));
-		if (pfds == NULL) {
-			warn("sndio: cannot allocate pollfd structures");
-			goto failed;
-		}
-
-		return 1;
-	failed:
-		cleanup();
-		return 0;
+	pa_context_disconnect(context);
+	pa_context_unref(context);
+	pa_mainloop_free(mainloop);
+}
+
+const char *
+vol_perc(const char *card)
+{
+	prepare_data(card);
+	return vol_str;
+}
+
+const char *
+vol_mute(const char *card)
+{
+	prepare_data(card);
+	static char key[16] = { '\0' };
+	snprintf(key, sizeof(key), "%s", vol_muted ? "MUT" : "VOL");
+	return key;
+}
+
+void
+context_state_cb(pa_context *c, void *userdata)
+{
+	const char *card_name = userdata;
+	switch (pa_context_get_state(c)) {
+	case PA_CONTEXT_READY:
+		pa_context_get_sink_info_by_name(c, card_name, sink_info_cb,
+		                                 NULL);
+		break;
+	case PA_CONTEXT_FAILED:
+	case PA_CONTEXT_TERMINATED:
+		data_ready = 1;
+		break;
+	default:
+		break;
 	}
-
-	const char *
-	vol_perc(const char *unused)
-	{
-		struct control *c;
-		int n, v, value;
-
-		if (!initialized)
-			initialized = init();
-
-		if (hdl == NULL)
-			return NULL;
-
-		n = sioctl_pollfd(hdl, pfds, POLLIN);
-		if (n > 0) {
-			n = poll(pfds, n, 0);
-			if (n > 0) {
-				if (sioctl_revents(hdl, pfds) & POLLHUP) {
-					warn("sndio: disconnected");
-					cleanup();
-					initialized = 0;
-					return NULL;
-				}
-			}
-		}
-
-		value = 100;
-		LIST_FOREACH(c, &controls, next) {
-			if (c->type == CTRL_MUTE && c->val == 1)
-				value = 0;
-			else if (c->type == CTRL_LEVEL) {
-				v = (c->val * 100 + c->maxval / 2) / c->maxval;
-				/* For multiple channels return the minimum. */
-				if (v < value)
-					value = v;
-			}
-		}
-
-		return bprintf("%d", value);
+}
+
+void
+sink_info_cb(pa_context *c, const pa_sink_info *i, int eol, void *userdata)
+{
+	if (eol > 0) {
+		data_ready = 1;
+		return;
 	}
-#else
-	#include <sys/soundcard.h>
 
-	const char *
-	vol_perc(const char *card)
-	{
-		size_t i;
-		int v, afd, devmask;
-		char *vnames[] = SOUND_DEVICE_NAMES;
+	unsigned volume_percent =
+		(unsigned)(100 * pa_cvolume_avg(&(i->volume)) / PA_VOLUME_NORM);
+	snprintf(vol_str, sizeof(vol_str), "%u", volume_percent);
 
-		if ((afd = open(card, O_RDONLY | O_NONBLOCK)) < 0) {
-			warn("open '%s':", card);
-			return NULL;
-		}
+	vol_muted = i->mute;
 
-		if (ioctl(afd, (int)SOUND_MIXER_READ_DEVMASK, &devmask) < 0) {
-			warn("ioctl 'SOUND_MIXER_READ_DEVMASK':");
-			close(afd);
-			return NULL;
-		}
-		for (i = 0; i < LEN(vnames); i++) {
-			if (devmask & (1 << i) && !strcmp("vol", vnames[i])) {
-				if (ioctl(afd, MIXER_READ(i), &v) < 0) {
-					warn("ioctl 'MIXER_READ(%ld)':", i);
-					close(afd);
-					return NULL;
-				}
-			}
-		}
-
-		close(afd);
-
-		return bprintf("%d", v & 0xff);
-	}
-#endif
+	data_ready = 1;
+}
diff --git a/config.def.h b/config.def.h
index 100093e..ffabbc8 100644
--- a/config.def.h
+++ b/config.def.h
@@ -59,12 +59,13 @@ static const char unknown_str[] = "n/a";
  * up                  interface is running            interface name (eth0)
  * uptime              system uptime                   NULL
  * username            username of current user        NULL
- * vol_perc            OSS/ALSA volume in percent      mixer file (/dev/mixer)
- *                                                     NULL on OpenBSD/FreeBSD
- * wifi_essid          WiFi ESSID                      interface name (wlan0)
- * wifi_perc           WiFi signal in percent          interface name (wlan0)
+ * vol_perc            PulseAudio/PipeWire volume in   sink ID (@DEFAULT_SINK@,
+ * 1, etc) percent (can be > 100) vol_mute            Audio sink mute status
+ * sink ID (@DEFAULT_SINK@, 1, etc) as MUT or VOL wifi_essid          WiFi ESSID
+ * interface name (wlan0) wifi_perc           WiFi signal in percent interface
+ * name (wlan0)
  */
 static const struct arg args[] = {
 	/* function format          argument */
-	{ datetime, "%s",           "%F %T" },
+	{ datetime, "%s", "%F %T" },
 };
diff --git a/config.mk b/config.mk
index a8f5c23..1ff094d 100644
--- a/config.mk
+++ b/config.mk
@@ -16,7 +16,7 @@ CFLAGS   = -std=c99 -pedantic -Wall -Wextra -Wno-unused-parameter -Os
 LDFLAGS  = -L$(X11LIB) -s
 # OpenBSD: add -lsndio
 # FreeBSD: add -lkvm -lsndio
-LDLIBS   = -lX11
+LDLIBS   = -lX11 -lpulse
 
 # compiler and linker
 CC = cc
diff --git a/slstatus.h b/slstatus.h
index 394281c..92b26fe 100644
--- a/slstatus.h
+++ b/slstatus.h
@@ -79,6 +79,7 @@ const char *username(const char *unused);
 
 /* volume */
 const char *vol_perc(const char *card);
+const char *vol_mute(const char *card);
 
 /* wifi */
 const char *wifi_essid(const char *interface);
-- 
2.51.0

